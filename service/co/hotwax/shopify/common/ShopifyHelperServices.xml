<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="send" noun="ShopifyRequest" authenticate="anonymous-all">
        <description>
            This is a generic service which will be used to make all types of Shopify API calls.
        </description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="endPoint"/>
            <parameter name="requestType" required="true"/>
            <parameter name="contentType" required="true"/>
            <parameter name="requestBody" type="Map"/>
            <parameter name="parameters" type="Map"/>
            <parameter name="url"/>
            <parameter name="limit"/>
        </in-parameters>
        <out-parameters>
            <parameter name="statusCode" type="Integer" required="true"/>
            <parameter name="response" type="Map"/>
            <parameter name="nextLink"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote"/>
            <if condition="systemMessageRemote == null"><return error="true" message="Could not find SystemMessageRemote with ID ${systemMessageRemote.systemMessageRemoteId}"/></if>
            <if condition="systemMessageRemote.sendUrl == null"><return error="true" message="Could not find SystemMessageRemote.sendUrl in SystemMessageRemote with ID ${systemMessageRemote.systemMessageRemoteId}"/></if>
            <if condition="!(systemMessageRemote.password || systemMessageRemote.sharedSecret || systemMessageRemote.sendSharedSecret)"><return error="true" message="Credentials are missing in SystemMessageRemote data with ID ${systemMessageRemoteId}"/></if>

            <!-- Check for access scope, this is to avoid issues while initial setup -->
            <!-- If no accessScopeEnumId is set, default will be Read Access for Shopify Shop -->
            <set field="accessScopeEnumId" value="SHOP_READ_ACCESS"/>
            <entity-find-related-one value-field="systemMessageRemote" relationship-name="access" to-value-field="accessScopeEnum" cache="true"/>

            <if condition="accessScopeEnum &amp;&amp; 'ShopifyShopAccessScope'.equals(accessScopeEnum?.enumTypeId)">
                <set field="accessScopeEnumId" from="accessScopeEnum.enumId"/>
            </if>
            <if condition="'SHOP_NO_ACCESS'.equals(accessScopeEnumId)">
                <return error="true" message="No Access is enabled for Shopify with systemMessageRemoteId, ${systemMessageRemoteId}."/>
            </if>
            <if condition="!'GET'.equals(requestType) &amp;&amp; 'SHOP_READ_ACCESS'.equals(accessScopeEnumId)">
                <return error="true" message="Cannot call ${endPoint?:url} with request type, ${requestType}. Only Read Access is enabled for Shopify with systemMessageRemoteId, ${systemMessageRemoteId}."/>
            </if>

            <!-- Preparing the shopify url -->
            <if condition="endPoint">
                <then>
                    <set field="sendUrl" from="systemMessageRemote.sendUrl.endsWith('/') ? systemMessageRemote.sendUrl : systemMessageRemote.sendUrl+ '/'" />
                    <set field="shopifyUrl" from="sendUrl + endPoint"/>
                </then>
                <else-if condition="url">
                    <set field="shopifyUrl" from="url"/>
                </else-if>
            </if>

            <script><![CDATA[
                import org.moqui.util.RestClient

                ec.logger.info("shopifyUrl Before =>" + shopifyUrl)
                shopifyUrl = ec.resourceFacade.expand(shopifyUrl, null, ["shopifyApiVersion": System.getProperty("shopify_api_version")])
                ec.logger.info("shopifyUrl After =>" + shopifyUrl)
                // Prepare RestClient and call Shopify API
                RestClient restClient = ec.service.rest()
                restClient.timeoutRetry(true);
                restClient.retry(2, 4);
                restClient.method(requestType)
                restClient.uri(shopifyUrl)

                //Check for basic auth, in case of private app system should use basic auth
                if (systemMessageRemote.username && systemMessageRemote.password && !systemMessageRemote.authHeaderName) {
                    restClient.basicAuth(systemMessageRemote.username, systemMessageRemote.password);
                } else if (systemMessageRemote.sharedSecret) {
                    restClient.addHeader(systemMessageRemote.authHeaderName?:'X-Shopify-Access-Token',systemMessageRemote.sharedSecret);
                } else if (systemMessageRemote.sendSharedSecret) {
                    restClient.addHeader(systemMessageRemote.authHeaderName?:'X-Shopify-Access-Token',systemMessageRemote.sendSharedSecret);
                } else {
                    restClient.addHeader(systemMessageRemote.authHeaderName?:'X-Shopify-Access-Token',systemMessageRemote.password);
                }
                restClient.contentType(contentType)

                // Include parameters only if endPoint and parameters is not null
                if (endPoint && parameters != null) {

                    // Setting default limit
                    if (!limit) {
                        parameters.put("limit", "250")
                    } else {
                        parameters.put("limit", limit)
                    }
                    restClient.addBodyParameters(parameters)
                }
                if (requestBody != null) {
                    restClient.jsonObject(requestBody)
                }
                try {
                    RestClient.RestResponse restResponse = restClient.call()
                    response = restResponse.jsonObject()
                    statusCode = restResponse.getStatusCode()
                    headers = restResponse.headers()

                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        ec.logger.warn("Unsuccessful with status code: ${statusCode} and response: ${response}")
                        return
                    }
                } catch (Exception e) {
                    ec.logger.error("Error in API call Error: ${e.getMessage()}")
                }
            ]]></script>

            <!-- Preparing the nextLink -->
            <set field="nextLink" value=""/>
            <set field="links" type="List" from="headers?.get('Link')"/>
            <iterate list="links" entry="link">
                <set field="parsedLink" type="List" from="link.split(';')"/>
                <if condition="link.contains('next')">
                    <set field="nextLink" from="parsedLink.get(0)"/>
                    <if condition="nextLink">
                        <if condition="nextLink.indexOf('&lt;') >= 0 &amp;&amp; nextLink.lastIndexOf('&gt;') >= 0">
                            <set field="nextLink" from="nextLink.substring(nextLink.indexOf('&lt;') + 1, nextLink.lastIndexOf('&gt;'))"/>
                        </if>
                    </if>
                </if>
            </iterate>
        </actions>
    </service>
</services>