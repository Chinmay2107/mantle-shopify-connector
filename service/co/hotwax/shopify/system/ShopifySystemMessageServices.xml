<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="consume" noun="FulfillmentFeed" authenticate="anonymous-all">
        <description>
            Consume Fulfillment Feed JSON System Message and produce 'CreateShopifyFulfillment' System Message for each record.
        </description>
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage">
                <field-map field-name="systemMessageId"/>
            </entity-find-one>

            <set field="fileText" from="ec.resource.getLocationReference(systemMessage.messageText).getText()"/>
            <set field="shipments" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(fileText, List.class)"/>

            <!-- NOTE: With change in poll#SystemMessageFileSftp service, the messageText will hold the file path
                instead of the file content, so removed null check on fileText, instead we need to check the
                expected shipments data being read from the filePath.
                If no shipments, one scenario is transformation in NiFi generating file with null value as no
                valid shipments data, or it may be due to some other unexpected JSON generated to be consumed,
                then the file can be checked further for any possible issue. -->
            <if condition="!shipments">
                <message type="warning" error="true">System message [${systemMessageId}] for Type [${systemMessage?.systemMessageTypeId}] has messageText [${systemMessage.messageText}], with Fulfillment Feed file having incorrect data and may contain null, not consuming the feed file.</message>
            </if>
            <iterate list="shipments" entry="shipment">
                <set field="messageText" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.writeValueAsString(shipment)"/>
                <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage" in-map="[systemMessageTypeId:'CreateShopifyFulfillment', systemMessageRemoteId:systemMessage.consumeSmrId, messageText:messageText, sendNow:true, orderId: shipment.orderId, mode: 'sync']"
                              out-map="context" ignore-error="true" transaction="force-new"/>
            </iterate>
        </actions>
    </service>
    <service verb="send" noun="ShopifyFulfillmentSystemMessage" authenticate="anonymous-all">
        <description>
            Send service to invoke Create Shopify Fulfillment API for the System Message.
        </description>
        <implements service="org.moqui.impl.SystemMessageServices.send#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage">
                <field-map field-name="systemMessageId"/>
            </entity-find-one>

            <set field="shipment" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(systemMessage.messageText, Map.class)"/>
            <set field="lineItems" from="[]"/>
            <iterate list="shipment.shipmentItems" entry="shipmentItem">
                <set field="lineItem" from="[:]"/>
                <set field="lineItem.shopifyLineItemId" from="shipmentItem.shopifyOrderLineId"/>
                <set field="lineItem.quantity" from="shipmentItem.quantity"/>
                <script>lineItems.add(lineItem)</script>
            </iterate>

            <set field="fulfillmentContext" from="[:]"/>
            <set field="fulfillmentContext.lineItems" from="lineItems"/>
            <set field="fulfillmentContext.shopifyOrderId" from="shipment.shopifyOrderId"/>
            <set field="fulfillmentContext.trackingNumber" from="shipment.trackingNumber"/>
            <set field="fulfillmentContext.trackingUrl" from="shipment.trackingUrl"/>
            <set field="fulfillmentContext.carrier" from="shipment.carrierPartyId"/>
            <set field="fulfillmentContext.systemMessageRemoteId" from="systemMessage.systemMessageRemoteId"/>
            <service-call name="co.hotwax.shopify.fulfillment.ShopifyFulfillmentServices.create#Fulfillment" in-map="fulfillmentContext" out-map="outMap"/>

            <set field="remoteMessageId" from="outMap.shopifyFulfillmentId"/>
        </actions>
    </service>
    <service verb="consume" noun="GraphQLBulkImportFeed" authenticate="anonymous-all">
        <description>
            Consume Bulk Import Feed System Message, upload bulk import feed to Shopify's staged upload url
            and produce corresponding shopify bulk mutation system message.
        </description>
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage">
                <field-map field-name="systemMessageId"/>
            </entity-find-one>

            <if condition="!systemMessage.messageText">
                <return type="warning" message="System message [${systemMessageId}] for Type ${systemMessage?.systemMessageTypeId} has no message text, not consuming."/>
            </if>

            <!-- Find SystemMessageType related to systemMessage.systemMessageType to produce corresponding system message -->
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue">
                <field-map field-name="enumId" from="systemMessage.systemMessageTypeId"/>
            </entity-find-one>

            <if condition="!enumValue || !enumValue.relatedEnumId">
                <return type="warning" message="Related SystemMessageType to produce for ${systemMessage?.systemMessageTypeId} not defined, not consuming."/>
            </if>

            <service-call name="co.hotwax.shopify.graphQL.ShopifyBulkImportServices.get#JsonlStagedUploadUrl" in-map="[systemMessageRemoteId:systemMessage.consumeSmrId, fileName:systemMessage.remoteMessageId]"
                          out-map="context"/>

            <service-call name="co.hotwax.shopify.graphQL.ShopifyBulkImportServices.upload#JsonlFileToShopify" in-map="[stagedUploadUrlMap:stagedUploadUrlMap, fileLocation:systemMessage.messageText, fileName:systemMessage.remoteMessageId]"
                          out-map="context"/>

            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage" in-map="[systemMessageTypeId:enumValue.relatedEnumId, systemMessageRemoteId:systemMessage.consumeSmrId, messageText:stagedUploadPath, sendNow:false]"
                          out-map="context"/>
        </actions>
    </service>
    <service verb="send" noun="BulkMutationSystemMessage" authenticate="anonymous-all">
        <description>
            Send service to invoke Run Shopify Bulk Operation Mutation API for the System Message.
        </description>
        <implements service="org.moqui.impl.SystemMessageServices.send#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageAndType" value-field="systemMessage">
                <field-map field-name="systemMessageId"/>
            </entity-find-one>

            <set field="requestBody" from="[systemMessageRemoteId:systemMessage.systemMessageRemoteId, mutationTemplateLocation:systemMessage.sendPath,
                                  stagedUploadPath: systemMessage.messageText]"/>

            <entity-find entity-name="moqui.service.message.SystemMessageTypeParam" list="additionalParameters">
                <econdition field-name="systemMessageTypeId" operator="equals" from="systemMessage.systemMessageTypeId"/>
                <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessage.systemMessageRemoteId"/>
            </entity-find>
            <if condition="additionalParameters">
                <iterate list="additionalParametrs" entry="paramMap">
                    <script>requestBody.put(${paramMap.parameterName}, ${paramMap.parameterValue})</script>
                </iterate>
            </if>

            <service-call name="co.hotwax.shopify.graphQL.ShopifyBulkImportServices.run#BulkOperationMutation"
                          in-map="requestBody" out-map="context"/>

            <set field="remoteMessageId" from="shopifyBulkOperationId"/>
        </actions>
    </service>
    <service verb="send" noun="ProducedBulkOperationSystemMessage" authenticate="anonymous-all">
        <description>
            Scheduled service to send next bulk operation in the queue.
        </description>
        <in-parameters>
            <parameter name="parentSystemMessageTypeId" required="true"/>
            <parameter name="retryLimit" type="Integer" default="3"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="moqui.service.message.SystemMessageAndType" list="sentSystemMessages">
                <econdition field-name="statusId" operator="equals" value="SmsgSent"/>
                <econdition field-name="parentTypeId" operator="equals" from="parentSystemMessageTypeId"/>
            </entity-find>
            <if condition="sentSystemMessages">
                <return message="Aborting, ${parentSystemMessageTypeId} Operation already in progress."/>
            </if>
            <entity-find entity-name="moqui.service.message.SystemMessageAndType" list="producedSystemMessages" limit="1">
                <econdition field-name="statusId" operator="equals" value="SmsgProduced"/>
                <econdition field-name="parentTypeId" operator="equals" from="parentSystemMessageTypeId"/>
                <order-by field-name="initDate"/>
            </entity-find>
            <if condition="!producedSystemMessages">
                <return message="Aborting, no ${parentSystemMessageTypeId} Operation System Messages found to process."/>
            </if>

            <if condition="producedSystemMessages[0].failCount &lt; retryLimit">
                <service-call name="org.moqui.impl.SystemMessageServices.send#ProducedSystemMessage"
                              in-map="[systemMessageId:producedSystemMessages[0].systemMessageId]"/>
                <else>
                    <service-call name="update#moqui.service.message.SystemMessage"
                                  in-map="[systemMessageId:producedSystemMessages[0].systemMessageId, statusId:'SmsgError',
                                    lastAttemptDate:ec.user.nowTimestamp]"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="process" noun="BulkOperationResult" authenticate="anonymous-all">
        <description>
            Fetch and process the bulk operations result for a sent system message and create respective incoming
            system message for further processing the result file link.
        </description>
        <in-parameters>
            <parameter name="systemMessageId" required="true"/>
        </in-parameters>
        <actions>
            <set field="statusMap" from="[completed:'SmsgConfirmed', canceled:'SmsgCancelled', failed:'SmsgError', expired:'SmsgError']"/>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <service-call name="co.hotwax.shopify.graphQL.ShopifyBulkImportServices.get#BulkOperationResult" in-map="[systemMessageRemoteId:systemMessage.systemMessageRemoteId, shopifyBulkOperationId:systemMessage.remoteMessageId]"
                          out-map="bulkOperationResult"/>

            <set field="status" from="bulkOperationResult.response.status"/>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <if condition="'failed'.equalsIgnoreCase(status)">
                <service-call name="create#moqui.service.message.SystemMessageError" in-map="[systemMessageId:systemMessageId, errorDate:nowDate, errorText:bulkOperationResult.response.errorCode]"/>
            </if>
            <if condition="'expired'.equalsIgnoreCase(status)">
                <service-call name="create#moqui.service.message.SystemMessageError" in-map="[systemMessageId:systemMessageId, errorDate:nowDate, errorText:'The bulk operation URL has expired.']"/>
            </if>
            <service-call name="update#moqui.service.message.SystemMessage" in-map="[systemMessageId:systemMessageId, statusId:statusMap.get(status.toLowerCase())]"/>

            <service-call name="org.moqui.impl.SystemMessageServices.receive#IncomingSystemMessage"
                          in-map="[systemMessageTypeId:systemMessage.systemMessageTypeId, messageText:bulkOperationResult.response.url,
                              systemMessageRemoteId:systemMessage.systemMessageRemoteId, remoteMessageId:systemMessageId]"/>
        </actions>
    </service>
    <service verb="consume" noun="BulkOperationResult" authenticate="anonymous-all">
        <description>
            Consume service to download and store result file for received bulk operation result system message.
        </description>
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <entity-find-related-one value-field="systemMessage" relationship-name="type" to-value-field="systemMessageType"/>

            <set field="nowDate" from="ec.l10n.format(ec.user.nowTimestamp, 'yyyy-MM-dd-HH-mm-ss', null, TimeZone.getDefault())"/>
            <set field="contentRoot" from="ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager'"/>
            <set field="urlMap" from="[nowDate:nowDate, contentRoot:contentRoot, systemMessageId:systemMessage.systemMessageId, remoteMessageId:systemMessage.remoteMessageId]"/>
            <set field="fileLocation" from="ec.resourceFacade.expand(systemMessageType.receivePath, null, urlMap)"/>

            <service-call name="co.hotwax.shopify.graphQL.ShopifyBulkImportServices.store#BulkOperationResultFile"
                          in-map="[downloadUrl:systemMessage.messageText, fileLocation:fileLocation]" out-map="context"/>
        </actions>
    </service>
    <service verb="poll" noun="BulkOperationResult" authenticate="anonymous-all">
        <description>
            Polling service to fetch and process bulk operation result for a sent bulk mutation or query system message.
        </description>
        <in-parameters>
            <parameter name="parentSystemMessageTypeId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="moqui.service.message.SystemMessageAndType" list="systemMessages" limit="1">
                <econdition field-name="statusId" operator="equals" value="SmsgSent"/>
                <econdition field-name="parentTypeId" operator="equals" from="parentSystemMessageTypeId"/>
            </entity-find>
            <if condition="!systemMessages">
                <return message="No bulk operation in progress."/>
            </if>
            <service-call name="co.hotwax.shopify.system.ShopifySystemMessageServices.process#BulkOperationResult"
                          in-map="[systemMessageId:systemMessages[0].systemMessageId]" out-map="context"/>
        </actions>
    </service>
    <service verb="queue" noun="BulkQuerySystemMessage" authenticate="anonymous-all">
        <description>
            Scheduled service to queue a bulk query system message of a specific SystemMessageType.
        </description>
        <in-parameters>
            <parameter name="systemMessageTypeId" required="true"/>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="filterQuery"/>
        </in-parameters>
        <actions>
            <set field="messageText" from="filterQuery ?: 'null'"/>
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                          in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId, messageText:messageText, sendNow:false]"
                          out-map="context"/>
        </actions>
    </service>
    <service verb="send" noun="BulkQuerySystemMessage" authenticate="anonymous-all">
        <description>
            Send service to invoke Run Shopify Bulk Operation Query API for the System Message.
        </description>
        <implements service="org.moqui.impl.SystemMessageServices.send#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageAndType" value-field="systemMessage">
                <field-map field-name="systemMessageId"/>
            </entity-find-one>

            <set field="requestBody" from="[systemMessageRemoteId:systemMessage.systemMessageRemoteId, queryTemplateLocation:systemMessage.sendPath]"/>

            <entity-find entity-name="moqui.service.message.SystemMessageTypeParam" list="additionalParameters">
                <econdition field-name="systemMessageTypeId" operator="equals" from="systemMessage.systemMessageTypeId"/>
                <econdition field-name="systemMessageRemoteId" operator="equals" from="systemMessage.systemMessageRemoteId"/>
            </entity-find>
            <if condition="additionalParameters">
                <iterate list="additionalParametrs" entry="paramMap">
                    <script>requestBody.put(${paramMap.parameterName}, ${paramMap.parameterValue})</script>
                </iterate>
            </if>
            <if condition="systemMessage.messageText">
                <set field="requestBody.filterQuery" from="systemMessage.messageText"/>
            </if>

            <service-call name="co.hotwax.shopify.graphQL.ShopifyBulkImportServices.run#BulkOperationQuery"
                          in-map="requestBody" out-map="context"/>

            <set field="remoteMessageId" from="shopifyBulkOperationId"/>
        </actions>
    </service>
</services>